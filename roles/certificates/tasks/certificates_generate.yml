---
- name: Delete certificates folder on node-0
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.file:
    path: "{{ storage_certificates_path }}"
    state: absent

- name: Create certificates folder on node-0
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_certificates }}"
    recurse: true
  loop:
    - "{{ storage_certificates_path }}/CA"
    - "{{ storage_certificates_path }}/nodes"
    - "{{ storage_certificates_path }}/users"

#- name: Generate a new CA certificate
#  tags:
#    - certificates_generate
#  delegate_to: node-0
#  run_once: true
#  ansible.builtin.shell: >
#    openssl req -new -x509 -keyout {{ storage_certificates_path }}/CA/ca.key \
#    -out {{ storage_certificates_path }}/CA/ca.crt -days 3650 \
#    -passout pass:{{ certificate_password }} -subj "/CN=Kafka-CA"

- name: Generate a new CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl req -new -x509 \
    -keyout {{ storage_certificates_path }}/CA/ca.key \
    -out {{ storage_certificates_path }}/CA/ca.crt \
    -days 3650 \
    -passout pass:{{ certificate_password }} \
    -subj "/CN=Kafka-CA" \
    -addext "basicConstraints=critical,CA:true" \
    -addext "keyUsage=critical,keyCertSign,cRLSign" \
    -addext "subjectKeyIdentifier=hash" \
    -addext "authorityKeyIdentifier=keyid,issuer"

- name: Generate a shared PKCS#12 truststore with the CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    keytool -import -trustcacerts -noprompt -alias ca \
    -file {{ storage_certificates_path }}/CA/ca.crt \
    -keystore {{ storage_certificates_path }}/shared.truststore.p12 \
    -storetype PKCS12 -storepass {{ certificate_password }}

- name: Generate a shared JKS truststore with the CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    keytool -import -trustcacerts -noprompt -alias ca \
    -file {{ storage_certificates_path }}/CA/ca.crt \
    -keystore {{ storage_certificates_path }}/shared.truststore.jks \
    -storetype JKS -storepass {{ certificate_password }}

- name: Create folders for node certificates
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ groups['all'] }}"
  ansible.builtin.file:
    path: "{{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}"
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Generate OpenSSL configuration
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.template:
    src: openssl.cnf.j2
    dest: "{{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.cnf"
  loop: "{{ groups['all'] }}"

- name: Generate private keys
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl genpkey -algorithm RSA \
    -out {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.key \
    -pass pass:{{ certificate_password }}
  loop: "{{ groups['all'] }}"

- name: Generate node SAN CSRs
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl req -new \
    -subj   "/CN={{ hostvars[item].hostname }}" \
    -key    {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.key \
    -out    {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.csr \
    -config {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.cnf
  loop: "{{ groups['all'] }}"

- name: Sign node SAN CSRs using the Self-Signed CA
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl x509 -req -in {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.csr \
    -CA {{ storage_certificates_path }}/CA/ca.crt \
    -CAkey {{ storage_certificates_path }}/CA/ca.key \
    -passin pass:{{ certificate_password }} -CAcreateserial \
    -out {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.crt \
    -days 3650 -extensions v3_req \
    -extfile {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.cnf
  loop: "{{ groups['all'] }}"

- name: Generate PKCS#12 node keystores
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl pkcs12 -export -in {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.crt \
    -inkey {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.key \
    -certfile {{ storage_certificates_path }}/CA/ca.crt -name {{ hostvars[item].hostname }} \
    -passin pass:{{ certificate_password }} -passout pass:{{ certificate_password }} \
    -out {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.p12
  loop: "{{ groups['all'] }}"

- name: Convert PKCS#12 node keystores to JKS format
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    keytool -importkeystore \
    -destkeystore {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.jks \
    -deststoretype JKS \
    -deststorepass {{ certificate_password }} -destkeypass {{ certificate_password }} \
    -srckeystore {{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.p12 \
    -srcstoretype PKCS12 -srcstorepass {{ certificate_password }} \
    -alias {{ hostvars[item].hostname }} -noprompt
  loop: "{{ groups['all'] }}"
  register: keystore_conversion
  changed_when: "'importing keystore' in keystore_conversion.stdout"
  args:
    creates: "{{ storage_certificates_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.jks"

- name: Create folders for user certificates
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.file:
    path: "{{ storage_certificates_path }}/users/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Generate private keys for users
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl genpkey -algorithm RSA -out {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.key \
    -pass pass:{{ certificate_password }}

- name: Generate user CSRs
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl req -new -key {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.key \
    -out {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.csr \
    -subj "/CN={{ item }}"

- name: Sign user CSRs using the Self-Signed CA
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl x509 -req -in {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.csr \
    -CA {{ storage_certificates_path }}/CA/ca.crt \
    -CAkey {{ storage_certificates_path }}/CA/ca.key \
    -passin pass:{{ certificate_password }} -CAcreateserial \
    -out {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.crt \
    -days 3650 -extensions v3_req 
  loop: "{{ credentials | map(attribute='username') | list }}"

- name: Generate PKCS#12 user keystores
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl pkcs12 -export -in {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.crt \
    -inkey {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.key \
    -certfile {{ storage_certificates_path }}/CA/ca.crt -name {{ item }} \
    -passin pass:{{ certificate_password }} -passout pass:{{ certificate_password }} \
    -out {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.p12

- name: Convert PKCS#12 user keystores to JKS format
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    keytool -importkeystore \
        -destkeystore {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.jks \
        -deststoretype JKS \
        -deststorepass {{ certificate_password }} -destkeypass {{ certificate_password }} \
        -srckeystore {{ storage_certificates_path }}/users/{{ item }}/{{ item }}.p12 \
        -srcstoretype PKCS12 -srcstorepass {{ certificate_password }} \
        -alias {{ item }} -noprompt

- name: Set certificate folder permissions
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.file:
    path: "{{ node_certificates_path }}"
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_certificates }}"
    recurse: true

- name: Create certificate folder on nodes
  tags:
    - certificates_generate
  ansible.builtin.file:
    path: "{{ node_certificates_path }}"
    state: directory
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: '{{ chmod_certificates }}'
    recurse: true

- name: Distribute shared truststore to all nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificates_path }}/{{ item }}"
    dest: "{{ node_certificates_path }}/{{ item }}"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"
  with_items:
    - shared.truststore.jks
#    - shared.truststore.p12

- name: Distribute node keystore to all nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificates_path }}/nodes/{{ hostvars[inventory_hostname].hostname }}/{{ hostvars[inventory_hostname].hostname }}.jks"
    dest: "{{ node_certificates_path }}/{{ hostvars[inventory_hostname].hostname }}.jks"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"

- name: Distribute admin keystore to all nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificates_path }}/users/admin/admin.jks"
    dest: "{{ node_certificates_path }}/admin.jks"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"

- name: Distribute connect keystore to connect nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificates_path }}/users/connect/connect.jks"
    dest: "{{ node_certificates_path }}/connect.jks"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"
  when: "'connect' in group_names"
