events {
    worker_connections 1024;
}

http {
    #resolver 10.1.2.1 10.1.2.2 valid=30s ipv6=off;

    upstream schema_registry_backend {
        #zone schema_registry_zone 64k;
        {% for host in groups['schema'] %}
            server {{ hostvars[host]['hostname'] }}:{{ port_schema_rest_ext }};
        {% endfor %}
    }

    server {
        listen {{ port_balancer_schema_int }} ssl;
        server_name {{ hostvars['node-00']['hostname'] }};

        ssl_certificate /data/cluster/certificates/nodes/{{ hostvars['node-00']['hostname'] }}/{{ hostvars['node-00']['hostname'] }}.crt;
        ssl_certificate_key /data/cluster/certificates/nodes/{{ hostvars['node-00']['hostname'] }}/{{ hostvars['node-00']['hostname'] }}.key;
        ssl_protocols TLSv1.3;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Require client certificates for authentication
        ssl_client_certificate /data/cluster/certificates/CA/ca.crt;
        ssl_verify_client on;  # Accept any valid certificate

        location / {
            proxy_pass https://schema_registry_backend;

            # Enable dynamic SNI (Server Name Indication)
            proxy_ssl_server_name on;
            # Uses the requested hostname dynamically
            proxy_ssl_name $host;

            # Nginx authenticates to Schema Registry with its own certificate
            proxy_ssl_certificate /data/cluster/certificates/nodes/{{ hostvars['node-00']['hostname'] }}/{{ hostvars['node-00']['hostname'] }}.crt;
            proxy_ssl_certificate_key /data/cluster/certificates/nodes/{{ hostvars['node-00']['hostname'] }}/{{ hostvars['node-00']['hostname'] }}.key;

            proxy_ssl_verify on;
            proxy_ssl_protocols TLSv1.3;
            proxy_ssl_trusted_certificate /data/cluster/certificates/CA/ca.crt;

            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
