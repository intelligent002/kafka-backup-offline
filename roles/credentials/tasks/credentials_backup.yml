---
- name: Create folder for cold rotated backups
  tags:
    - credentials_backup
  delegate_to: node-0
  run_once: true
  file:
    path: "{{ credentials_backup_path }}"
    state: directory
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_credentials }}"

- name: Create folder for cold pinned backups
  tags:
    - credentials_backup
  delegate_to: node-0
  run_once: true
  file:
    path: "{{ credentials_backup_pinned }}"
    state: directory
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_credentials }}"

- name: Create credentials archive on nodes
  tags:
    - credentials_backup
  community.general.archive:
    path: "{{ node_credentials_path }}/"  # The directory or files to be archived
    dest: "{{ node_temp_path }}/{{ inventory_hostname }}-credentials.tar.xz"  # Destination archive
    format: xz  # Use XZ compression
    remove: no  # Set to 'yes' to remove the original files after archiving

- name: Pull credentials archive from nodes
  tags:
    - credentials_backup
  delegate_to: node-0
  synchronize:
    src: "{{ node_temp_path }}/{{ inventory_hostname }}-credentials.tar.xz"
    dest: "{{ storage_temp_path }}/{{ inventory_hostname }}-credentials.tar.xz"
    mode: pull
    rsync_opts:
      - "--timeout=60"
      - "--checksum"

- name: Create credentials zip of zips
  tags:
    - credentials_backup
  delegate_to: node-0
  run_once: true
  community.general.archive:
    path: "{{ storage_temp_path }}/"  # The directory or files to be archived
    dest: "{{ credentials_backup_file }}"  # Destination archive
    format: xz  # Use XZ compression
    remove: no  # Set to 'yes' to remove the original files after archiving
