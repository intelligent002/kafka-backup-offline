# === Nodes startup and shutdown order =================================================================================

# Defines the order of starting cluster nodes.
startup_order:
  - node-01
  - node-02
  - node-03
  - node-04
  - node-05
  - node-06
  - node-07
  - node-08
  - node-09
  - node-10
  - node-11
  - node-12
  - node-13
  - node-14
  - node-15

# Defines the order of shutting down cluster nodes.
shutdown_order:
  - node-15
  - node-14
  - node-13
  - node-12
  - node-11
  - node-10
  - node-09
  - node-08
  - node-07
  - node-06
  - node-05
  - node-04
  - node-03
  - node-02
  - node-01

# === Nodes startup docker commands ====================================================================================

heap_size_percent: 50

docker_command_controllers_run: >
  docker run -d --restart=always
  --name={{ hostvars[item]['hostname'] }} -h {{ hostvars[item]['hostname'] }}
  -p {{ hostvars[item]['port_jmx_monitoring_ext'] }}:{{ hostvars[item]['port_jmx_monitoring_int'] }}
  -p {{ hostvars[item]['port_control_plane_ext'] }}:{{ hostvars[item]['port_control_plane_int'] }}
  -e KAFKA_HEAP_OPTS="-Xmx{{ node_heap[item] }} -Xms{{ node_heap[item] }}"
  -e KAFKA_JMX_OPTS="
  -Djava.rmi.server.hostname={{ hostvars[item]['ansible_host'] }}
  -Dcom.sun.management.jmxremote
  -Dcom.sun.management.jmxremote.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.rmi.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false
  "
  -v {{ hostvars[item]['node_config_path'] }}:/mnt/shared/config
  -v {{ hostvars[item]['node_certificates_path'] }}:/etc/kafka/secrets
  -v {{ hostvars[item]['node_credentials_path'] }}:/credentials
  -v {{ hostvars[item]['node_data_path'] }}:/var/lib/kafka/data
  -v {{ hostvars[item]['node_meta_path'] }}:/var/lib/kafka/meta
  -v {{ hostvars[item]['node_logs_path'] }}:/opt/kafka/logs
  docker.artifactory.intel.r7g.org/apache/kafka:3.9.0
  /opt/kafka/bin/kafka-server-start.sh /mnt/shared/config/kraft.properties

docker_command_brokers_run: >
  docker run -d --restart=always
  --name={{ hostvars[item]['hostname'] }} -h {{ hostvars[item]['hostname'] }}
  -p {{ hostvars[item]['port_jmx_monitoring_ext'] }}:{{ hostvars[item]['port_jmx_monitoring_int'] }}
  -p {{ hostvars[item]['port_replication_ext'] }}:{{ hostvars[item]['port_replication_int'] }}
  -p {{ hostvars[item]['port_consumer_mtls_ext'] }}:{{ hostvars[item]['port_consumer_mtls_int'] }}
  -p {{ hostvars[item]['port_consumer_sasl_ssl_ext'] }}:{{ hostvars[item]['port_consumer_sasl_ssl_int'] }}
  -e KAFKA_HEAP_OPTS="-Xmx{{ node_heap[item] }} -Xms{{ node_heap[item] }}"
  -e KAFKA_JMX_OPTS="
  -Djava.rmi.server.hostname={{ hostvars[item]['ansible_host'] }}
  -Dcom.sun.management.jmxremote
  -Dcom.sun.management.jmxremote.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.rmi.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false
  "
  -v {{ hostvars[item]['node_config_path'] }}:/mnt/shared/config
  -v {{ hostvars[item]['node_certificates_path'] }}:/etc/kafka/secrets
  -v {{ hostvars[item]['node_credentials_path'] }}:/credentials
  -v {{ hostvars[item]['node_data_path'] }}:/var/lib/kafka/data
  -v {{ hostvars[item]['node_meta_path'] }}:/var/lib/kafka/meta
  -v {{ hostvars[item]['node_logs_path'] }}:/opt/kafka/logs
  docker.artifactory.intel.r7g.org/apache/kafka:3.9.0
  /opt/kafka/bin/kafka-server-start.sh /mnt/shared/config/kraft.properties

docker_command_schema_run: >
  docker run -d --restart=always
  --name={{ hostvars[item]['hostname'] }} -h {{ hostvars[item]['hostname'] }}
  -p {{ hostvars[item]['port_jmx_monitoring_ext'] }}:{{ hostvars[item]['port_jmx_monitoring_int'] }}
  -p {{ hostvars[item]['port_schema_rest_ext'] }}:{{ hostvars[item]['port_schema_rest_int'] }}
  -e KAFKA_HEAP_OPTS="-Xmx{{ node_heap[item] }} -Xms{{ node_heap[item] }}"
  -e KAFKA_JMX_OPTS="
  -Djava.rmi.server.hostname={{ hostvars[item]['ansible_host'] }}
  -Dcom.sun.management.jmxremote
  -Dcom.sun.management.jmxremote.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.rmi.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false
  "
  -v {{ hostvars[item]['node_config_path'] }}:/mnt/shared/config
  -v {{ hostvars[item]['node_certificates_path'] }}:/etc/kafka/secrets
  -v {{ hostvars[item]['node_credentials_path'] }}:/credentials
  -v {{ hostvars[item]['node_data_path'] }}:/var/lib/kafka/data
  -v {{ hostvars[item]['node_meta_path'] }}:/var/lib/kafka/meta
  -v {{ hostvars[item]['node_logs_path'] }}:/opt/kafka/logs
  docker.artifactory.intel.r7g.org/confluentinc/cp-schema-registry:7.9.0
  /usr/bin/schema-registry-start /mnt/shared/config/kraft.properties

docker_command_balancer_schema_run: >
  docker run -d --restart=always 
  --name balancer-schema 
  -p {{ port_schema_balancer_ext }}:{{ port_schema_balancer_int }} 
  -p {{ port_schema_balancer_admin_ext }}:{{ port_schema_balancer_admin_int }} 
  --health-cmd "bash -c 'exec 3<>/dev/tcp/localhost/{{ port_schema_balancer_admin_int }} && echo -e \"GET /ready HTTP/1.1\nHost: localhost\n\n\" >&3 && timeout 1 cat <&3 | grep -q LIVE; exec 3<&-; exec 3>&-'" 
  --health-interval=60s 
  --health-timeout=10s 
  --health-retries=5 
  --health-start-period=5s 
  -v /data:/data:ro 
  -v /data/cluster/config/balancer-schema.yaml:/etc/envoy/envoy.yaml:ro 
  envoyproxy/envoy:v1.33.0

docker_command_connect_run: >
  docker run -d --restart=always
  --name={{ hostvars[item]['hostname'] }} -h {{ hostvars[item]['hostname'] }}
  -p {{ hostvars[item]['port_jmx_monitoring_ext'] }}:{{ hostvars[item]['port_jmx_monitoring_int'] }}
  -p {{ hostvars[item]['port_connect_rest_ext'] }}:{{ hostvars[item]['port_connect_rest_int'] }}
  -e KAFKA_HEAP_OPTS="-Xmx{{ node_heap[item] }} -Xms{{ node_heap[item] }}"
  -e KAFKA_JMX_OPTS="
  -Djava.rmi.server.hostname={{ hostvars[item]['ansible_host'] }}
  -Dcom.sun.management.jmxremote
  -Dcom.sun.management.jmxremote.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.rmi.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false
  "
  -v {{ hostvars[item]['node_config_path'] }}:/mnt/shared/config
  -v {{ hostvars[item]['node_certificates_path'] }}:/etc/kafka/secrets
  -v {{ hostvars[item]['node_credentials_path'] }}:/credentials
  -v {{ hostvars[item]['node_data_path'] }}:/var/lib/kafka/data
  -v {{ hostvars[item]['node_meta_path'] }}:/var/lib/kafka/meta
  -v {{ hostvars[item]['node_logs_path'] }}:/opt/kafka/logs
  -v {{ hostvars[item]['node_plugins_path'] }}:/usr/share/java
  docker.artifactory.intel.r7g.org/apache/kafka:3.9.0
  /opt/kafka/bin/connect-distributed.sh /mnt/shared/config/kraft.properties

docker_command_balancer_connect_run: >
  docker run -d --restart=always 
  --name balancer-connect 
  -p {{ port_connect_balancer_ext }}:{{ port_connect_balancer_int }} 
  -p {{ port_connect_balancer_admin_ext }}:{{ port_connect_balancer_admin_int }} 
  --health-cmd "bash -c 'exec 3<>/dev/tcp/localhost/{{ port_connect_balancer_admin_int }} && echo -e \"GET /ready HTTP/1.1\nHost: localhost\n\n\" >&3 && timeout 1 cat <&3 | grep -q LIVE; exec 3<&-; exec 3>&-'" 
  --health-interval=60s 
  --health-timeout=10s 
  --health-retries=5 
  --health-start-period=5s 
  -v /data:/data:ro 
  -v /data/cluster/config/balancer-connect.yaml:/etc/envoy/envoy.yaml:ro 
  envoyproxy/envoy:v1.33.0

docker_command_ksql_run: >
  docker run -d --restart=always
  --name={{ hostvars[item]['hostname'] }} -h {{ hostvars[item]['hostname'] }}
  -p {{ hostvars[item]['port_jmx_monitoring_ext'] }}:{{ hostvars[item]['port_jmx_monitoring_int'] }}
  -p {{ hostvars[item]['port_ksql_rest_ext'] }}:{{ hostvars[item]['port_ksql_rest_int'] }}
  -p {{ hostvars[item]['port_ksql_sync_ext'] }}:{{ hostvars[item]['port_ksql_sync_int'] }}
  -e KAFKA_HEAP_OPTS="-Xmx{{ node_heap[item] }} -Xms{{ node_heap[item] }}"
  -e KSQL_OPTS="-Djdk.tls.client.protocols=TLSv1.3 -Dhttps.protocols=TLSv1.3 -Djdk.tls.server.protocols=TLSv1.3"
  -e KAFKA_JMX_OPTS="
  -Djava.rmi.server.hostname={{ hostvars[item]['ansible_host'] }}
  -Dcom.sun.management.jmxremote
  -Dcom.sun.management.jmxremote.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.rmi.port={{ hostvars[item]['port_jmx_monitoring_int'] }}
  -Dcom.sun.management.jmxremote.authenticate=false
  -Dcom.sun.management.jmxremote.ssl=false
  "
  -v {{ hostvars[item]['node_config_path'] }}:/mnt/shared/config
  -v {{ hostvars[item]['node_certificates_path'] }}:/etc/kafka/secrets
  -v {{ hostvars[item]['node_credentials_path'] }}:/credentials
  -v {{ hostvars[item]['node_data_path'] }}:/var/lib/ksql
  -v {{ hostvars[item]['node_meta_path'] }}:/tmp/schema-registry
  -v {{ hostvars[item]['node_logs_path'] }}:/var/log/ksqldb
  docker.artifactory.intel.r7g.org/confluentinc/ksqldb-server:latest
  /usr/bin/ksql-server-start /mnt/shared/config/kraft.properties

docker_command_balancer_ksql_run: >
  docker run -d --restart=always 
  --name balancer-ksql 
  -p {{ port_ksql_balancer_ext }}:{{ port_ksql_balancer_int }} 
  -p {{ port_ksql_balancer_admin_ext }}:{{ port_ksql_balancer_admin_int }} 
  --health-cmd "bash -c 'exec 3<>/dev/tcp/localhost/{{ port_ksql_balancer_admin_int }} && echo -e \"GET /ready HTTP/1.1\nHost: localhost\n\n\" >&3 && timeout 1 cat <&3 | grep -q LIVE; exec 3<&-; exec 3>&-'" 
  --health-interval=60s 
  --health-timeout=10s 
  --health-retries=5 
  --health-start-period=5s 
  -v /data:/data:ro 
  -v /data/cluster/config/balancer-ksql.yaml:/etc/envoy/envoy.yaml:ro 
  envoyproxy/envoy:v1.33.0

docker_command_data_format: >
  docker run --rm
  -v {{ node_config_path }}/:/mnt/shared/config 
  -v {{ node_data_path }}:/var/lib/kafka/data 
  -v {{ node_meta_path }}:/var/lib/kafka/meta 
  -v {{ node_logs_path }}:/opt/kafka/logs 
  -v {{ node_certificates_path }}/:/etc/kafka/secrets 
  apache/kafka:3.9.0 
  /opt/kafka/bin/kafka-storage.sh format 
  --cluster-id {{ cluster_id }} 
  --add-scram 'SCRAM-SHA-512=[name=admin,password=insecure]' 
  --config /mnt/shared/config/kraft.properties

docker_command_portainer_run: >
  docker run -d --restart=always
  --name=portainer 
  -p {{ hostvars[item]['port_portainer_ext'] }}:{{ hostvars[item]['port_portainer_int'] }}
  --health-cmd="if wget --spider --no-check-certificate -q https://localhost:9443/api/system/status; then echo 'Status is OK' && exit 0; else echo 'Status is NOT OK' && exit 1; fi" 
  --health-interval=30s 
  --health-timeout=5s 
  --health-retries=3 
  -v /var/run/docker.sock:/var/run/docker.sock 
  -v {{ node_certificates_path }}:/certs 
  -v portainer_data:/data 
  portainer/portainer-ce:2.27.1-alpine 
  --sslcert /certs/{{ hostvars['node-0']['hostname'] }}.crt 
  --sslkey /certs/{{ hostvars['node-0']['hostname'] }}.key