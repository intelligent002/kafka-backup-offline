---
- name: Collect all group names for nodes
  tags:
    - containers_run
  set_fact:
    group_names_all: "{{ group_names_all | default({}) | combine({item: hostvars[item]['group_names']}) }}"
  with_items: "{{ startup_order }}"
  run_once: true

- name: Determine host group dynamically
  tags:
    - containers_run
  set_fact:
    host_group_map: "{{ host_group_map | default({}) | combine({ item: (group_names_all[item] | default([]) | difference(['all', 'cluster']) | first) if (group_names_all[item] | default([]) | difference(['all', 'cluster'])) | length > 0 else 'undefined_group' }) }}"
  with_items: "{{ startup_order }}"
  run_once: true

- name: Debug resolved group and command
  tags:
    - containers_run
  debug:
    msg: "Node: {{ item }}, Selected Group: {{ host_group_map[item] }}, Command: {{ docker_run_role[host_group_map[item]] | default('NOT FOUND') }}"
  with_items: "{{ startup_order }}"
  run_once: true

- name: Determine and run appropriate Docker command based on group
  tags:
    - containers_run
  delegate_to: "{{ item }}"
  run_once: true
  shell: >
    {% if 'controllers' in host_group_map[item] %}
    {{ lookup('template', docker_run_role_controllers) }}
    {% elif 'brokers' in host_group_map[item] %}
    {{ lookup('template', docker_run_role_brokers) }}
    {% elif 'connect' in host_group_map[item] %}
    {{ lookup('template', docker_run_role_connect) }}
    {% else %}
    echo 'Undefined group, no command executed'
    {% endif %}
  with_items: "{{ startup_order }}"
  when: host_group_map[item] is defined


#- name: Run docker containers in startup order
#  tags:
#    - containers_run
#  shell: "{{ docker_command_containers_run }}"
#  delegate_to: "{{ item }}"
#  with_items: "{{ startup_order }}"
#  run_once: true  # Ensure task runs only once on localhost
