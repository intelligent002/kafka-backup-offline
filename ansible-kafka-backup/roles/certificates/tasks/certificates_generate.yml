---
- name: Delete the certificate storage directory on node-0
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.file:
    path: "{{ storage_certificate_path }}"
    state: absent

- name: Create the certificate storage directory on node-0
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.file:
    path: "{{ storage_certificate_path }}"
    state: directory
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_certificate }}"

- name: Create certificate folders on node-0
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  file:
    path: "{{ item }}"
    state: directory
    mode: "{{ chmod_certificate }}"
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
  loop:
    - "{{ storage_certificate_path }}/CA"
    - "{{ storage_certificate_path }}/nodes"
    - "{{ storage_certificate_path }}/users"

- name: Generate a new CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl req -new -x509 -keyout {{ storage_certificate_path }}/CA/ca.key \
    -out {{ storage_certificate_path }}/CA/ca.crt -days 3650 \
    -passout pass:{{ certificate_password }} -subj "/CN=Kafka-CA"

- name: Generate OpenSSL configuration files for each node
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.template:
    src: openssl.cnf.j2
    dest: "{{ storage_certificate_path }}/nodes/{{ hostvars[item].hostname }}/{{ hostvars[item].hostname }}.cnf"
  loop: "{{ groups['cluster'] }}"

- name: Generate private keys for each node
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl genpkey -algorithm RSA \
    -out {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.key \
    -pass pass:{{ certificate_password }}
  loop: "{{ groups['cluster'] }}"

- name: Create Certificate Signing Requests (CSR) for each node
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl req -new \
    -subj   "/CN={{ hostvars[item].hostname }}" \
    -key    {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.key \
    -out    {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.csr \
    -config {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.cnf
  loop: "{{ groups['cluster'] }}"

- name: Sign node CSRs using the CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl x509 -req -in {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.csr \
    -CA {{ storage_certificate_path }}/CA/ca.crt \
    -CAkey {{ storage_certificate_path }}/CA/ca.key \
    -passin pass:{{ certificate_password }} -CAcreateserial \
    -out {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.crt \
    -days 3650 -extensions v3_req \
    -extfile {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.cnf
  loop: "{{ groups['cluster'] }}"

- name: Generate PKCS#12 keystores for each node
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    openssl pkcs12 -export -in {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.crt \
    -inkey {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.key \
    -certfile {{ storage_certificate_path }}/CA/ca.crt -name {{ hostvars[item].hostname }} \
    -passin pass:{{ certificate_password }} -passout pass:{{ certificate_password }} \
    -out {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.p12
  loop: "{{ groups['cluster'] }}"

- name: Convert PKCS#12 keystores to JKS format
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    keytool -importkeystore \
    -deststorepass {{ certificate_password }} -destkeypass {{ certificate_password }} \
    -destkeystore {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.jks \
    -srckeystore {{ storage_certificate_path }}/{{ hostvars[item].hostname }}.p12 \
    -srcstoretype PKCS12 -srcstorepass {{ certificate_password }} \
    -alias {{ hostvars[item].hostname }} -noprompt
  loop: "{{ groups['cluster'] }}"

- name: Create user directories for certificates
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.file:
    path: "{{ storage_certificate_path }}/users/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0700'

- name: Generate private keys for users
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl genpkey -algorithm RSA -out {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.key \
    -pass pass:{{ certificate_password }}

- name: Generate CSRs for users
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl req -new -key {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.key \
    -out {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.csr \
    -subj "/CN={{ item }}"

- name: Sign CSRs to create user certificates
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl x509 -req -in {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.csr \
    -CA {{ storage_certificate_path }}/CA/ca.crt -CAkey {{ storage_certificate_path }}/CA/ca.key \
    -passin pass:{{ certificate_password }} -CAcreateserial \
    -out {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.crt -days 3650

- name: Create PKCS#12 keystores for users
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    openssl pkcs12 -export -in {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.crt \
    -inkey {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.key \
    -certfile {{ storage_certificate_path }}/CA/ca.crt -name {{ item }} \
    -passin pass:{{ certificate_password }} -passout pass:{{ certificate_password }} \
    -out {{ storage_certificate_path }}/{{ item }}.keystore.p12

- name: Convert PKCS#12 keystores to JKS format for users
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  loop: "{{ credentials | map(attribute='username') | list }}"
  ansible.builtin.shell: >
    keytool -importkeystore \
    -deststorepass {{ certificate_password }} -destkeypass {{ certificate_password }} \
    -destkeystore {{ storage_certificate_path }}/users/{{ item }}/{{ item }}.jks \
    -srckeystore {{ storage_certificate_path }}/{{ item }}.keystore.p12 \
    -srcstoretype PKCS12 -srcstorepass {{ certificate_password }} \
    -alias {{ item }} -noprompt

- name: Generate a shared JKS truststore with the CA certificate
  tags:
    - certificates_generate
  delegate_to: node-0
  run_once: true
  ansible.builtin.shell: >
    keytool -import -trustcacerts -noprompt -alias ca \
    -file {{ storage_certificate_path }}/CA/ca.crt \
    -keystore {{ storage_certificate_path }}/shared.truststore.jks \
    -storepass {{ certificate_password }}

- name: Distribute node-specific keystore files to respective nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificate_path }}/{{ hostvars[inventory_hostname].hostname }}.jks"
    dest: "{{ node_certificate_path }}/{{ hostvars[inventory_hostname].hostname }}.jks"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"

- name: Distribute shared truststore to all nodes
  tags:
    - certificates_generate
  delegate_to: node-0
  synchronize:
    src: "{{ storage_certificate_path }}/shared.truststore.jks"
    dest: "{{ node_certificate_path }}/shared.truststore.jks"
    mode: push
    rsync_opts:
      - "--timeout=60"
      - "--checksum"

- name: Set correct permissions for certificate files on nodes
  tags:
    - certificates_generate
  ansible.builtin.file:
    path: "{{ node_certificate_path }}"
    owner: "{{ owner_user_data }}"
    group: "{{ owner_group_data }}"
    mode: "{{ chmod_certificate }}"
    recurse: true
