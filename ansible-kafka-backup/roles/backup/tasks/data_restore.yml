---
- name: Verify archive exists
  tags:
    - data_restore
  delegate_to: localhost
  run_once: true
  stat:
    path: "{{ restore_archive }}"
  register: archive_stat

- name: Fail if archive does not exist
  tags:
    - data_restore
  fail:
    msg: "The specified restore archive {{ restore_archive }} does not exist!"
  when: not archive_stat.stat.exists

- name: Extract data archive to temp on localhost
  tags:
    - data_restore
  delegate_to: localhost
  run_once: true
  unarchive:
    src: "{{ restore_archive }}"
    dest: "{{ storage_temp }}"
    remote_src: yes

- name: Push extracted data archives to nodes
  tags:
    - data_restore
  copy:
    src: "{{ storage_temp }}/{{ inventory_hostname }}-data.tar.zx"
    dest: "{{ node_temp }}/{{ inventory_hostname }}-data.tar.zx"
    owner: root
    group: root
    mode: '0644'

# Include containers_stop tasks
- name: Stop containers before data restore
  tags:
    - data_restore
  include_tasks: ../../docker/tasks/stop.yml

- name: Remove cluster data folder on nodes
  tags:
    - data_restore
  file:
    path: "{{ node_data }}"
    state: absent

- name: Create cluster data folder on nodes
  tags:
    - data_restore
  file:
    path: "{{ node_data }}"
    state: directory
    mode: '{{ data_folder_chmod }}'
    owner: {{ data_owner_user }}
    group: {{ data_owner_group }}

- name: Restore cluster data on nodes
  tags:
    - data_restore
  unarchive:
    src: "{{ node_temp }}/{{ inventory_hostname }}-data.tar.zx"
    dest: "{{ node_data }}"
    remote_src: yes

# Include containers_start tasks
- name: Start containers after data restore
  tags:
    - data_restore
  include_tasks: ../../docker/tasks/start.yml
