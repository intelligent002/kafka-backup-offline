# Node ID
node.id={{ node_id }}

# Define the roles for this node (controller and broker)
process.roles=broker

# Unique cluster ID that must match across all nodes (controller and broker)
cluster.id={{ cluster_id }}

#############################################################################################
# Controller Quorum Configuration

# Define the quorum of controllers with their respective node IDs and addresses
controller.quorum.voters={% for host in (groups['combined'] | default([])) + (groups['controllers'] | default([])) %}
{{ hostvars[host]['node_id'] }}@{{ hostvars[host]['hostname'] }}:{{ hostvars[host]['port_service_ext'] }}{% if not loop.last %},{% endif %}{% endfor %}

#############################################################################################
# Listeners and communication

{% if use_certificate %}
# Path to the keystore file (PKCS#12 format) containing the private key and certificate.
ssl.keystore.location=/etc/kafka/ssl/keystore.p12

# Password to unlock the keystore file. Same password is used for the private key.
ssl.keystore.password={{ certificate_password }}

# Password to unlock the private key in the keystore. Same password is used as the keystore password.
ssl.key.password={{ certificate_password }}

# Alias of the certificate in the keystore to use
ssl.keystore.alias={{ keystore_alias_name }}

{% if use_credentials %}
# Optional: Require client certificates for authentication.
ssl.client.auth=required
{% endif %}
{% endif %}

# Specify the name of the listener used for controller communication
controller.listener.names=CONTROLLER

# Advertise the broker listener for clients to connect
{% if use_certificate and use_credentials %}
#advertised.listeners=SASL_SSL://{{ hostname }}:{{ port_service_ext }}
advertised.listeners=SSL://{{ hostname }}:{{ port_service_ext }}
{% elif use_certificate and not use_credentials %}
advertised.listeners=SSL://{{ hostname }}:{{ port_service_ext }}
{% elif not use_certificate and use_credentials %}
advertised.listeners=SASL_PLAINTEXT://{{ hostname }}:{{ port_service_ext }}
{% elif not use_certificate and not use_credentials %}
advertised.listeners=PLAINTEXT://{{ hostname }}:{{ port_service_ext }}
{% endif %}

# Define the listeners for a broker-only node
{% if use_certificate and use_credentials %}
#listeners=SASL_SSL://0.0.0.0:{{ port_service_ext }}
listeners=SSL://0.0.0.0:{{ port_service_ext }}
{% elif use_certificate and not use_credentials %}
listeners=SSL://0.0.0.0:{{ port_service_ext }}
{% elif not use_certificate and use_credentials %}
listeners=SASL_PLAINTEXT://0.0.0.0:{{ port_service_ext }}
{% elif not use_certificate and not use_credentials %}
listeners=PLAINTEXT://0.0.0.0:{{ port_service_ext }}
{% endif %}

# Map listeners to their respective security protocols
{% if use_certificate and use_credentials %}
#listener.security.protocol.map=CONTROLLER:SASL_SSL,SASL_SSL:SASL_SSL
listener.security.protocol.map=CONTROLLER:SSL,SSL:SSL
{% elif use_certificate and not use_credentials %}
listener.security.protocol.map=CONTROLLER:SSL,SSL:SSL
{% elif not use_certificate and use_credentials %}
listener.security.protocol.map=CONTROLLER:SASL_PLAINTEXT,SASL_PLAINTEXT:SASL_PLAINTEXT
{% elif not use_certificate and not use_credentials %}
listener.security.protocol.map=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
{% endif %}

# Define the security protocol for inter-broker communication
{% if use_certificate and use_credentials %}
#inter.broker.listener.name=SASL_SSL
inter.broker.listener.name=SSL
{% elif use_certificate and not use_credentials %}
inter.broker.listener.name=SSL
{% elif not use_certificate and use_credentials %}
inter.broker.listener.name=SASL_PLAINTEXT
{% elif not use_certificate and not use_credentials %}
inter.broker.listener.name=PLAINTEXT
{% endif %}

#############################################################################################
# ISR and replication for system topics to ensure high availability and fault tolerance

# Replication factor for the __consumer_offsets topic
offsets.topic.replication.factor=3

# Replication factor for the __transaction_state topic
transaction.state.log.replication.factor=3

# Minimum number of in-sync replicas required for transactional writes
transaction.state.log.min.isr=2

# Number of partitions for the __transaction_state topic
transaction.state.log.num.partitions=10

#############################################################################################
# Transactions

# Defines how often the broker will clean up expired or timed-out transactions
transaction.abort.timed.out.transaction.cleanup.interval.ms=300000

#############################################################################################
# Data

# This is where Kafka stores data for topics and logs
log.dirs=/var/lib/kafka/data

# Interval for checking and applying log retention policies (in ms)
log.retention.check.interval.ms=300000

# Retention period for logs before they are eligible for deletion (in hours)
log.retention.hours=168

# Maximum size of a single log segment before it is rolled over (in bytes, 1 GB)
log.segment.bytes=1073741824

# Enable log cleaner for log compaction
log.cleaner.enable=true

#############################################################################################
# Performance Settings

# Number of threads for handling network requests
num.network.threads=6

# Number of threads for handling I/O operations
num.io.threads=8

# Number of threads for log recovery during broker startup or failure recovery
num.recovery.threads.per.data.dir=2

#############################################################################################
# Log Flush Policy

# The number of messages to accept before forcing a flush of data to disk
log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
log.flush.interval.ms=1000

#############################################################################################
# Security Settings

# Enable/Disable automatic topic creation (recommended to disable for production)
auto.create.topics.enable=true

{% if use_credentials %}
#############################################################################################
# Authentication and Authorization

# Enables SASL authentication mechanisms (SCRAM-SHA-256 for SSL, PLAIN for plaintext)
#sasl.enabled.mechanisms={% if use_certificate %}SCRAM-SHA-256{% else %}PLAIN{% endif %}


# Configures the SASL mechanism used for broker-to-broker communication
#sasl.mechanism.inter.broker.protocol={% if use_certificate %}SCRAM-SHA-256{% else %}PLAIN{% endif %}


# Defines the authorizer class to enable ACL-based authorization
#authorizer.class.name=kafka.security.authorizer.AclAuthorizer

# Specifies superusers who bypass ACL checks
#super.users=User:admin
{% endif %}